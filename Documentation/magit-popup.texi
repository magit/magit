\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename ./magit-popup.info
@settitle Magit-Popup User Manual
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@copying
@ifnottex
Taking inspiration from regular prefix commands and prefix arguments,
this library implements a similar abstraction; a new kind of prefix
command that is associated with a specific set of infix arguments and
suffix commands.
@end ifnottex

@quotation
Copyright (C) 2015 Jonas Bernoulli <jonas@@bernoul.li>

You can redistribute this document and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any
later version.

This document is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.
@end quotation
@end copying

@dircategory Emacs
@direntry
* Magit-Popup: (magit-popup). Infix arguments with feedback.
@end direntry

@finalout
@titlepage
@title Magit-Popup User Manual
@subtitle for version 2.3
@author Jonas Bernoulli
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Magit-Popup User Manual
@insertcopying
@end ifnottex


@menu
* Introduction::
* Usage::
* Defining prefix and suffix commands::

@detailmenu
--- The Detailed Node Listing ---

Usage

* Customizing existing popups::
* Other options::

Defining prefix and suffix commands

* Defining prefix commands::
* Defining suffix commands::

@end detailmenu
@end menu



@node Introduction
@chapter Introduction

Taking inspiration from regular prefix commands and prefix arguments,
this library implements a similar abstraction; a new kind of prefix
command that is associated with a specific set of infix arguments and
suffix commands.

Invoking such a prefix command displays a popup buffer which lists the
associated infix arguments and suffix commands.  In that buffer each
argument is prefixes with the key sequence that can be used to toggle
it or change its value.  Likewise each suffix command is prefixed with
the key used to invoke it.  Such a popup buffer might look like this:

@verbatim
,-----------------------------------------
|Switches
| -l Show graph (--graph)
| -d Show refnames (--decorate)
|
|Options
| =m Search messages (--grep="popup")
| =p Search patches (-G)
|
|Action
| l Show log for current branch
| o Show log for another branch
'-----------------------------------------
@end verbatim

The user could then for example type @code{-l} to toggle the @code{--graph} @strong{switch}
(when it is on then it is shown in green, otherwise in gray), or @code{=m} to
change the value of the @strong{option} @code{--grep}.

Once all arguments are as desired one invokes a suffix command, which
causes the popup buffer to disappears.  The suffix command should then
retrieve the infix arguments in its @code{interactive} form like this is done
for prefix arguments.

While such "prefix-infix-suffix" combos were inspired by regular
prefix commands and prefix arguments, they are also quite different.
This should illustrate the most basic differences:

@itemize
@item
A regular prefix commands

@verbatim
        /- command1
prefix --- command2
        \- command3
@end verbatim


@item
Prefix arguments

@verbatim
         /- command1
C-u ... --- command2
         \- well *any* command
@end verbatim


@item
A Prefix-Infix-Suffix combo

@verbatim
         /- argument1 -\ /- suffix1
prefix----- argument2 --+-- suffix2
       ^ \- argument3 -/
       |        |
       '--------'
    (refresh buffer)
@end verbatim
@end itemize

This library was written as a replacement for @code{magit-key-mode} which was
used in Magit releases before 2.1.0.  It is used to implement all
"popups" in the current Magit release but a future release will switch
to yet another implementation.

This library does not depend on any other Magit libraries and it is
distributed as a separate package, which makes it possible to use it
in packages that are not related to Magit.  But keep in mind that it
will be deprecated eventually.

@node Usage
@chapter Usage

Every popup buffers created with a prefix command contains a section
named "Actions" listing the available suffix commands.  Most buffers
also contain a "Switches" and/or an "Options" section which list the
two types of infix arguments separately.

Switches are arguments that can be toggled on or off.  When a switch
is active then it is shown in color, when it is off then it is shown
in gray (of course the details depend on the color theme in use).

Options are arguments that have a value.  When an option has a value
then that is shown after the option itself.  Because for some options
the empty string is a valid value, options are additionally colorized
like switches to indicate whether they are active or not.

The events bound to suffix commands are always single alphabetic
characters.  The bindings for arguments are always two events long.
For switches the first key is always @code{-}, for options it is always @code{=}.
The second key is always an alphabetic character.

By default popup buffers also feature a section listing commands
common to all popups.  To avoid conflicts with suffix commands, the
bindings of these common commands are not alphabetic characters.  This
section is shown by default so that documentation-resistant users get
a change to notice them.

@defopt magit-popup-show-common-commands

This option controls whether the section which lists the commands
that are common to all popups is initially show.  We recommend you
set this to @code{nil} - after you have memorized that it can be shown on
demand using @code{C-t}.
@end defopt

@table @asis
@kindex C-t
@cindex magit-popup-toggle-show-common-commands
@item @kbd{C-t} @tie{}@tie{}@tie{}@tie{}(@code{magit-popup-toggle-show-common-commands})

Show or hide the section listing the commands shared by all popups.

@kindex C-g
@cindex magit-popup-quit
@item @kbd{C-g} @tie{}@tie{}@tie{}@tie{}(@code{magit-popup-quit})

Quit popup buffer without invoking a suffix command.
@end table

Without further action, setting arguments only affects the next suffix
command.  Invoking the same prefix command again resets the arguments
to their default value, but the defaults can be changed directly from
the popup buffer itself.  For a prefix command named @code{NAME-popup} the
default values are stored as the value of the custom option named
@code{NAME-arguments}.  While this option can be customized using the Custom
interface, it is better to do so directly from the popup buffer.

@table @asis
@kindex C-c C-c
@cindex magit-popup-set-default-arguments
@item @kbd{C-c C-c} @tie{}@tie{}@tie{}@tie{}(@code{magit-popup-set-default-arguments})

This sets the default value for the arguments for the current popup.

Then the popup buffer is closed without invoking a suffix command;
unless a prefix argument is used in which case the popup remains
open.

@kindex C-x C-s
@cindex magit-popup-save-default-arguments
@item @kbd{C-x C-s} @tie{}@tie{}@tie{}@tie{}(@code{magit-popup-save-default-arguments})

This sets the default value for the arguments for the current popup
and saves it for future Emacs sessions.

Then the popup buffer is closed without invoking an action; unless a
prefix argument is used in which case the popup remains open.
@end table

It is also possible to add additional arguments and commands to an
existing popup, but that cannot be done directly from the popup (or
the Custom interface).  See @ref{Customizing existing popups,Customizing existing popups}.

Documentation about a popup's arguments and commands can be shown
directly from the popup.

@table @asis
@kindex C-h i
@cindex magit-popup-info
@item @kbd{C-h i} @tie{}@tie{}@tie{}@tie{}(@code{magit-popup-info})

Show this manual.

@kindex ?
@cindex magit-popup-help
@item @kbd{?} @tie{}@tie{}@tie{}@tie{}(@code{magit-popup-help})

This command reads a key sequence and then shows the documentation
of the argument or command that sequence is bound to.  In other
words type the same keys that you would use to invoke the argument
or command, but prefix the sequence with @code{?}.

For suffix commands this shows the doc-string.  For arguments this
command can only show something for popups that have an associated
man-page.  If the man-page is set, then this command displays it in
a separate buffer and puts point on the entry about the argument in
question.

The buffer which is used to display the documentation is selected.
Simply press @code{q} to leave that buffer and restore the old window
configuration.
@end table

While it isn't very useful, it is possible to move around in a popup
buffer using @code{C-p} and @code{C-n}, and to invoke the argument or command at
point using @code{RET}.  But it is much more efficient to use the dedicated
key bindings instead, so these commands are not listed in popup
buffers along with the other common commands.

@menu
* Customizing existing popups::
* Other options::
@end menu

@node Customizing existing popups
@section Customizing existing popups

It is possible to define additional infix arguments and suffix
commands to an existing popup using the following functions.

You can find some examples which use the below commands at
@uref{https://github.com/magit/magit/wiki/Additional-proposed-infix-arguments-and-suffix-commands}.

@defun magit-define-popup-switch popup key desc switch &optional enable at prepend

In POPUP, define KEY as SWITCH.

POPUP is a popup command defined using @code{magit-define-popup}.  SWITCH
is a string representing an argument that takes no value.  KEY is a
character representing the second event in the sequence of
keystrokes used to toggle the argument.  (The first event, the
prefix, is shared among all switches, defaults to @code{-}, and can be
changed in @code{magit-popup-mode-keymap}).

DESC is a string describing the purpose of the argument, it is
displayed in the popup.

If optional ENABLE is non-nil then the switch is on by default.

SWITCH is inserted after all other switches already defined for
POPUP, unless optional PREPEND is non-nil, in which case it is
placed first.  If optional AT is non-nil then it should be the KEY
of another switch already defined for POPUP, the argument is then
placed before or after AT, depending on PREPEND.
@end defun

@defun magit-define-popup-option popup key desc option &optional reader value at prepend

In POPUP, define KEY as OPTION.

POPUP is a popup command defined using @code{magit-define-popup}.  OPTION
is a string representing an argument that takes a value.  KEY is a
character representing the second event in the sequence of
keystrokes used to set the argument's value.  (The first event, the
prefix, is shared among all options, defaults to @code{=}, and can be
changed in @code{magit-popup-mode-keymap}).

DESC is a string describing the purpose of the argument, it is
displayed in the popup.

If optional VALUE is non-nil then the option is on by default, and
VALUE is its default value.

OPTION is inserted after all other options already defined for
POPUP, unless optional PREPEND is non-nil, in which case it is
placed first.  If optional AT is non-nil then it should be the KEY
of another option already defined for POPUP, the argument is then
placed before or after AT, depending on PREPEND.
@end defun

@defun magit-define-popup-action popup key desc command &optional at prepend

In POPUP, define KEY as COMMAND.

POPUP is a popup command defined using @code{magit-define-popup}.  COMMAND
can be any command but should usually consume the popup arguments in
its @code{interactive} form.  KEY is a character representing the event
used invoke the action, i.e. to interactively call the COMMAND.

DESC is a string describing the purpose of the action, it is
displayed in the popup.

COMMAND is inserted after all other commands already defined for
POPUP, unless optional PREPEND is non-nil, in which case it is
placed first.  If optional AT is non-nil then it should be the KEY
of another command already defined for POPUP, the command is then
placed before or after AT, depending on PREPEND.
@end defun

@defun magit-define-popup-sequence-action popup key desc command &optional at prepend

Like @code{magit-define-popup-action}, but modifies the value of the
@code{:sequence-actions} property instead of @code{:actions}.
@end defun

@defun magit-change-popup-key popup type from to

In POPUP, bind TO to what FROM was bound to.  TYPE is one of
@code{:action}, @code{:sequence-action}, @code{:switch}, or @code{:option}.  Bind TO and unbind
FROM, both are characters.
@end defun

@defun magit-remove-popup-key popup type key

In POPUP, remove KEY's binding of TYPE.  POPUP is a popup command
defined using @code{magit-define-popup}.  TYPE is one of @code{:action},
@code{:sequence-action}, @code{:switch}, or @code{:option}.  KEY is the character which
is to be unbound.
@end defun

It is also possible to change other aspects of a popup by setting a
property using @code{plist-put}.  See @ref{Defining prefix commands,Defining prefix commands} for valid
properties.  The most likely change Magit users might want to make
is:

@lisp
(plist-put magit-show-refs-popup :use-prefix nil)
@end lisp

@node Other options
@section Other options

@defopt magit-popup-use-prefix-argument

This option controls the effect that the use of a prefix argument
before entering a popup has.  The @strong{intended} default is @code{default}, but
the @strong{actual} default is @code{disabled}.  This is necessary because the old
popup implementation did simply forward such a pre-popup prefix
argument to the suffix command invoked from the popup, and changing
that without users being aware of it could lead to tears.

@itemize
@item
@code{disabled}

Bring up a Custom option buffer so that the user reads
this and then makes an informed choice.


@item
@code{default}

With a prefix argument directly invoke the popup's
default action (an Emacs command), instead of bringing
up the popup.


@item
@code{popup}

With a prefix argument bring up the popup, otherwise
directly invoke the popup's default action.


@item
@code{nil}

Ignore prefix arguments.
@end itemize
This option can be overridden for individual popups.
@code{magit-show-refs-popup} for example defaults to invoking the default
action directly.  It only shows the popup buffer when a prefix
argument is used.  See @ref{Customizing existing popups,Customizing existing popups}.
@end defopt

@defopt magit-popup-manpage-package

The Emacs package used to display man-pages, one of @code{man} or @code{woman}.
@end defopt

To emphasize the default action by making it bold use this:

@lisp
(button-type-put 'magit-popup-action-button 'format " %k %D")
@end lisp

@node Defining prefix and suffix commands
@chapter Defining prefix and suffix commands

If you write an extension for Magit then you should use this library
now and later when @code{transient} is released port to that.

If you are considering using this library to define popups for
packages not related to Magit, then keep in mind that it will be
superseded eventually.  Once @code{transient} has been released I will only
fix bugs in @code{magit-popup} but not implement any new features.

Also consider using @code{hydra} instead.  To some extend @code{magit-popup} and
@code{hydra} are similar but have a different focus.  The main purpose of
@code{magit-popup} is to pass infix arguments to suffix commands.  If all you
need is a command dispatcher then you are better of using @code{hydra}.  Of
course @code{hydra} may also be a better fit not only because of the features
it lacks, but also because of the features it provides, which are in
turn missing from @code{magit-popup}.

Here is an example of how one defines a prefix command along with its
infix arguments, and then also one of its suffix commands.

@lisp
;;;###autoload (autoload 'magit-tag-popup "magit" nil t)
(magit-define-popup magit-tag-popup
  "Show popup buffer featuring tagging commands."
  'magit-commands
  :man-page "git-tag"
  :switches '((?a "Annotate" "--annotate")
              (?s "Sign"     "--sign")
              (?f "Force"    "--force"))
  :actions  '((?t "Create"   magit-tag)
              (?k "Delete"   magit-tag-delete)
              (?p "Prune"    magit-tag-prune))
  :default-action 'magit-tag)

;;;###autoload
(defun magit-tag (name rev &optional args)
  "Create a new tag with the given NAME at REV."
  (interactive (list (magit-read-tag "Tag name")
                     (magit-read-branch-or-commit "Place tag on")
                     (magit-tag-arguments)))
  (magit-run-git-with-editor "tag" args name rev))
@end lisp

@menu
* Defining prefix commands::
* Defining suffix commands::
@end menu

@node Defining prefix commands
@section Defining prefix commands

Prefix commands and their infix arguments are defined using the macro
@code{magit-define-popup}.  The key bindings and descriptions of suffix
commands are also defined using that macro, but the actual interactive
commands have to be defined separately using plain @code{defun}.

@defmac magit-define-popup name doc [group [mode [option]]] :keyword value@dots{}

This macro defines a popup named NAME.  The NAME should begin with
the package prefix and by convention end with @code{-popup}, it is used
as the name of the command which shows the popup and for an internal
variable (whose value is used to store information about the popup
and should not be accessed directly).  DOC is the doc-string of the
popup command.

This macro also defines an option and a function both named
@code{SHORTNAME-arguments}, where SHORTNAME is NAME with the trailing
@code{-popup} removed.  The name of this option and this function can be
overwritten using the optional argument OPTION, but that is rarely
advisable. As a special case if OPTION is specified but @code{nil}, then
this option and this function are not defined at all, which is
useful for popups that are used as simple dispatchers that offer no
arguments.

The option @code{SHORTNAME-arguments} holds the value for the popup
arguments.  It can be customized from within the popup or using the
Custom interface.  It can also have a buffer local value in any
non-popup buffer.  The local value for the buffer from which the
popup command was invoked, can be set from within the popup buffer.

The function @code{SHORTNAME-arguments} returns the currently effective
value of the variable by the same name.  See below for more
information.

The optional argument GROUP specifies the Custom group in which the
option is placed.  If omitted then the option is placed in some
group the same way it is done when directly using @code{defcustom} and
omitting the group.

The optional argument MODE specifies the mode used by the popup
buffer.  If it is omitted or @code{nil} then @code{magit-popup-mode} is used.

The remaining arguments should have the form @code{[KEYWORD VALUE]...}.

The following keywords are meaningful (and by convention are
usually specified in that order):

@itemize
@item
@code{:actions}

The actions which can be invoked from the popup.  VALUE is a list
whose members have the form (KEY DESC COMMAND), see
@code{magit-define-popup-action} for details.

How the actions are split into rows and columns currently depends
on the available space and @code{:max-action-columns}.

WARNING: This will likely be change to use a more explicit format
(((KEY DESC COMMAND)@dots{})@dots{}) before the release.

Actions are regular Emacs commands, which usually have an
@code{interactive} form setup to consume the values of the popup
@code{:switches} and @code{:options} when invoked from the corresponding popup,
else when invoked as the default action or directly without using
the popup, the default value of the variable @code{SHORTNAME-arguments}.
This is usually done by calling the function @code{SHORTNAME-arguments}.

Members of VALUE may also be strings, assuming the first member is
also a string.  Instead of just one action section with the
heading \"Actions\", multiple sections are then inserted into the
popup buffer, using these strings as headings.

Members of VALUE may also be nil.  This should only be used
together with @code{:max-action-columns} and allows having gaps in the
action grit, which can help arranging actions sensibly.


@item
@code{:default-action}

The default action of the popup which is used directly instead of
displaying the popup buffer, when the popup is invoked with a
prefix argument.  Also see @code{magit-popup-use-prefix-argument} and
@code{:use-prefix}, which can be used to inverse the meaning of the
prefix argument.


@item
@code{:use-prefix}

Controls when to display the popup buffer and when to invoke the
default action (if any) directly.  This overrides the global
default set using @code{magit-popup-use-prefix-argument}.  The value, if
specified, should be one of @code{default} or @code{prefix}.


@item
@code{:switches}

The popup arguments which can be toggled on and off.  VALUE is a
list whose members have the form @code{(KEY DESC SWITCH)}, see
@code{magit-define-popup-switch} for details.


@item
@code{:options}

The popup arguments which take a value, as in "--opt~OPTVAL".
VALUE is a list whose members have the form (KEY DESC OPTION
READER), see @code{magit-define-popup-option} for details.


@item
@code{:default-arguments}

The default arguments, a list of switches (which are then enabled
by default) and options with there default values, as in
"--OPT~OPTVAL\".


@item
@code{:man-page}

The name of the manpage to be displayed when the user requests
help for an argument.
@end itemize
When MODE is @code{magit-popup-sequence-mode}, then the following keywords
are also meaningful:

@itemize
@item
@code{:sequence-predicate}

When this function returns non-nil, then the popup uses
@code{:sequence-actions} instead of @code{:actions}.


@item
@code{:sequence-actions}

The actions which can be invoked from the popup, when
@code{:sequence-predicate} returns non-nil.
@end itemize
@end defmac

@node Defining suffix commands
@section Defining suffix commands

Commands intended to be invoked from a particular popup should
determine the currently effective arguments by calling the function
@code{SHORTNAME-arguments} inside their @code{interactive} form.  This function
is created by the @code{magit-define-popup} macro.  For a popup named
@code{prefix-foo-popup} the name of this function is @code{prefix-foo-arguments}.

When the command was invoked as an action in the respective popup,
then this function returns the arguments that were set in the popup.
Otherwise when the command was invoked as the default of the popup (by
calling the popup command with a prefix argument), or without using
the popup command at all, then this function returns the buffer-local
or global value of the variable @code{SHORTNAME-arguments}.

Internally arguments are handled as a list of strings.  This might not
be appropriate for the intended use inside commands, or it might be
necessary to manipulate that list somehow, i.e. to split "--ARG=VAL"
into "--ARG""VAL".  This should be done by advising or redefining the
function @code{SHORTNAME-arguments}.

Internally @code{SHORNAME-arguments} used following variables and function.
Except when redefining the former, you should not use these directly.

@defvar magit-current-popup

The popup from which this editing command was invoked.
@end defvar

@defvar magit-current-popup-args

The value of the popup arguments for this editing command.

If the current command was invoked from a popup, then this is a list
of strings of all the set switches and options.  This includes
arguments which are set by default not only those explicitly set
during this invocation.

When the value is nil, then that can be because no argument is set,
or because the current command wasn't invoked from a popup at all.
@end defvar

@defun magit-current-popup-args &rest args

This function returns the value of the popup arguments for this
editing command.  The value is the same as that of the variable by
the same name, except that FILTER is applied.  FILTER is a list of
regexps; only arguments that match one of them are returned.  The
first element of FILTER may also be @code{:not} in which case only
arguments that don't match any of the regexps are returned, or @code{:only}
which doesn't change the behavior.
@end defun

@bye
